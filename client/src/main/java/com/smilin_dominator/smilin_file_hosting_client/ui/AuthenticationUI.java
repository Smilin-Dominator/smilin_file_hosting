package com.smilin_dominator.smilin_file_hosting_client.ui;

import com.smilin_dominator.smilin_file_hosting_client.backend.Requester;
import com.smilin_dominator.smilin_file_hosting_client.model.Config;
import com.smilin_dominator.smilin_file_hosting_client.model.User;
import java.io.IOException;
import java.util.Optional;
import java.util.UUID;

/**
 *
 * @author devis
 */
public class AuthenticationUI extends javax.swing.JFrame {

    private final Config config;
    private final Requester requester;
    
    /**
     * Creates new form Authentication
     * @param config The app configuration
     * @param requester The requester object
     */
    public AuthenticationUI(Config config, Requester requester) {
        this.config = config;
        this.requester = requester;
        initComponents();
        UserIdInput.setText(config.getUserId() != null ? config.getUserId().toString() : ""); // Display UUID if it exists, else ""
        AccessTokenInput.setText(config.getAccessToken());
        KeyInput.setText(config.getKey());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Form = new javax.swing.JPanel();
        UserIdLabel = new javax.swing.JLabel();
        AccessTokenLabel = new javax.swing.JLabel();
        KeyLabel = new javax.swing.JLabel();
        UserIdInput = new javax.swing.JTextField();
        AccessTokenInput = new javax.swing.JTextField();
        KeyInput = new javax.swing.JTextField();
        MaximumThreadsLabel = new javax.swing.JLabel();
        MaximumThreadsInput = new javax.swing.JSlider();
        MainHeader = new javax.swing.JLabel();
        Operations = new javax.swing.JPanel();
        Login = new javax.swing.JButton();
        Register = new javax.swing.JButton();
        Save = new javax.swing.JButton();
        ErrorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Smilin' File Hosting - Authentication");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        Form.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        UserIdLabel.setText("User ID");

        AccessTokenLabel.setText("Access Token");

        KeyLabel.setText("Key");

        UserIdInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserIdInputActionPerformed(evt);
            }
        });

        AccessTokenInput.setToolTipText("");
        AccessTokenInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AccessTokenInputActionPerformed(evt);
            }
        });

        MaximumThreadsLabel.setText("Maximum Upload+Download Threads");

        MaximumThreadsInput.setMajorTickSpacing(1);
        MaximumThreadsInput.setMaximum(10);
        MaximumThreadsInput.setMinimum(1);
        MaximumThreadsInput.setPaintLabels(true);
        MaximumThreadsInput.setPaintTicks(true);
        MaximumThreadsInput.setSnapToTicks(true);
        MaximumThreadsInput.setValue(2);

        javax.swing.GroupLayout FormLayout = new javax.swing.GroupLayout(Form);
        Form.setLayout(FormLayout);
        FormLayout.setHorizontalGroup(
            FormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(MaximumThreadsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                    .addComponent(AccessTokenLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(UserIdLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(KeyLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(47, 47, 47)
                .addGroup(FormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(UserIdInput)
                    .addComponent(AccessTokenInput)
                    .addComponent(KeyInput)
                    .addComponent(MaximumThreadsInput, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        FormLayout.setVerticalGroup(
            FormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UserIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UserIdInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(FormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AccessTokenLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AccessTokenInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(FormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(KeyInput, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(KeyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(FormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(FormLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(MaximumThreadsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(MaximumThreadsInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        MainHeader.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        MainHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MainHeader.setText("Smilin' File Hosting");
        MainHeader.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        Operations.setForeground(new java.awt.Color(255, 0, 51));

        Login.setText("Login");
        Login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginActionPerformed(evt);
            }
        });

        Register.setText("Register");
        Register.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterActionPerformed(evt);
            }
        });

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        ErrorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout OperationsLayout = new javax.swing.GroupLayout(Operations);
        Operations.setLayout(OperationsLayout);
        OperationsLayout.setHorizontalGroup(
            OperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OperationsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ErrorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(OperationsLayout.createSequentialGroup()
                .addComponent(Login, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99)
                .addComponent(Save, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 105, Short.MAX_VALUE)
                .addComponent(Register, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        OperationsLayout.setVerticalGroup(
            OperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OperationsLayout.createSequentialGroup()
                .addGroup(OperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(OperationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Login)
                        .addComponent(Save, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(Register))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ErrorLabel)
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Form, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MainHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 623, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Operations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Form, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Operations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AccessTokenInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AccessTokenInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AccessTokenInputActionPerformed

    private void UserIdInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserIdInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UserIdInputActionPerformed

    private void LoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginActionPerformed
        new Thread(() -> {
            Login.setEnabled(false);
            ErrorLabel.setText("");
            try {
                final String key = KeyInput.getText();
                if (key.length() == 0) { // If there is no key
                    ErrorLabel.setText("Please enter the key used to encrypt your files!");
                    return;
                }
                final String userIdString = UserIdInput.getText();
                if (userIdString.length() < 36) { // If the UUID is not formatted
                    ErrorLabel.setText("Invalid UUID!");
                    return;
                }
                final String accessToken = AccessTokenInput.getText();
                if (accessToken.length() == 0) { // If there's no access token
                    final Optional<User> res = requester.login();
                    res.ifPresentOrElse(user -> {
                        config.setAccessToken(user.getAccessToken());
                        config.save();
                        this.dispose();
                    }, () -> {
                        ErrorLabel.setText("Invalid User ID. Did you register?");
                    });
                    return;
                }
                this.dispose();
            } catch (IOException e) {
                System.out.println(e.toString());
                ErrorLabel.setText("Error Occured!");
            } finally {
                Login.setEnabled(true);
            }
        }).start();
    }//GEN-LAST:event_LoginActionPerformed

    private void RegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterActionPerformed
        new Thread(() -> {
            ErrorLabel.setText("");
            Register.setEnabled(false);
            try {
                final String key = KeyInput.getText();
                if (key.length() == 0) { // If there is no key
                    ErrorLabel.setText("Please enter a key before registering!");
                    return;
                }
                final User res = requester.register(); // register the user
                final UUID userId = res.getUserId();
                final String accessToken = res.getAccessToken();
                config.setKey(key);
                config.setAccessToken(accessToken);
                config.setUserId(userId);
                config.save(); // save to the config file
                this.dispose();
            } catch (IOException e) {
                System.out.println(e.toString());
                ErrorLabel.setText("Error Occured!");
            } finally {
                Register.setEnabled(true);
            }
        }).start();
    }//GEN-LAST:event_RegisterActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        new Thread(() -> {
            Save.setEnabled(false);
            ErrorLabel.setText("");
            try {
                final String key = KeyInput.getText();
                if (key.length() == 0) {
                    ErrorLabel.setText("Please enter your key!");
                    return;
                }
                final String access_token = AccessTokenInput.getText();
                if (access_token.length() == 0) {
                    ErrorLabel.setText("Please enter your access token!");
                    return;
                }
                final Integer max_threads = MaximumThreadsInput.getValue();
                final UUID user_id = UUID.fromString(UserIdInput.getText());
                config.setKey(key);
                config.setAccessToken(access_token);
                config.setUserId(user_id);
                config.setMaxThreads(max_threads);
                config.save();
                this.dispose();
            }
            catch (IllegalArgumentException e) {
                ErrorLabel.setText("Invalid UUID!");
            } finally {
                Save.setEnabled(true);
            }
        }).start();
    }//GEN-LAST:event_SaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AccessTokenInput;
    private javax.swing.JLabel AccessTokenLabel;
    private javax.swing.JLabel ErrorLabel;
    private javax.swing.JPanel Form;
    private javax.swing.JTextField KeyInput;
    private javax.swing.JLabel KeyLabel;
    private javax.swing.JButton Login;
    private javax.swing.JLabel MainHeader;
    private javax.swing.JSlider MaximumThreadsInput;
    private javax.swing.JLabel MaximumThreadsLabel;
    private javax.swing.JPanel Operations;
    private javax.swing.JButton Register;
    private javax.swing.JButton Save;
    private javax.swing.JTextField UserIdInput;
    private javax.swing.JLabel UserIdLabel;
    // End of variables declaration//GEN-END:variables
}
