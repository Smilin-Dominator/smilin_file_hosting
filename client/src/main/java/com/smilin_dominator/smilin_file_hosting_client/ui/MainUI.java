package com.smilin_dominator.smilin_file_hosting_client.ui;

import com.smilin_dominator.smilin_file_hosting_client.model.File;
import java.awt.Component;
import java.util.List;
import java.util.LinkedList;
import java.util.function.Supplier;
import java.util.Objects;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.locks.Lock;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;

/**
 *
 * @author devis
 */
public class MainUI extends javax.swing.JFrame {

    // My fields
    
    private final Supplier<AuthenticationUI> getAuthenticationPage; 
    
    private final LinkedBlockingQueue<java.io.File> uploadQueue = new LinkedBlockingQueue<>();
    private final LinkedBlockingQueue<java.io.File> downloadQueue = new LinkedBlockingQueue<>();
    
    // My Components
    
    private final DefaultListModel<String> CurrentlyUploadingListModel = new DefaultListModel<>();
    private final DefaultListModel<String> ToBeUploadedListModel = new DefaultListModel<>();
    private final DefaultListModel<String> CurrentlyDownloadingListModel = new DefaultListModel<>();
    private final DefaultListModel<String> ToBeDownloadedListModel = new DefaultListModel<>();
    
    /**
     * Creates new form MainUI
     * @param supplier The supplier that gives an instance of the Authentication UI
     * @param max_threads The maximum number of threads to use for downloading and uploading 
     */
    public MainUI(Supplier<AuthenticationUI> supplier, Integer max_threads) {
        
        this.getAuthenticationPage = supplier;
        
        startThreads(max_threads);
        
        initComponents();
        
        // Custom config
        this.FileChooser.setMultiSelectionEnabled(true);
        this.FileSelectingDialog.setVisible(true);
        
    }
    
    // My Methods
    
    private void startThreads(Integer max_threads) {
        final ExecutorService executor = Executors.newFixedThreadPool(max_threads * 2);
        for (int i = 0; i <= max_threads; i++) {
            executor.submit(uploadHandler);
            executor.submit(downloadHandler);
        }
    }
    
    private final Callable<Void> downloadHandler = () -> {
        while (true) {
            try {
                final java.io.File file = downloadQueue.take();
                final String filename = file.getName();
                this.ToBeDownloadedListModel.removeElement(filename); // remove from to be downloaded list
                this.CurrentlyDownloadingListModel.addElement(filename); // add to the currently downloading list
                this.CurrentlyDownloadingListModel.removeElement(filename); // remove from the currently downloading list
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    };
    
    private final Callable<Void> uploadHandler = () -> {
        while (true) {
            try {
                final java.io.File file = uploadQueue.take();
                final String filename = file.getName();
                this.ToBeUploadedListModel.removeElement(filename); // remove from to be uploaded list
                this.CurrentlyUploadingListModel.addElement(filename); // add to the currently uploading list
                Thread.sleep(5000);
                this.CurrentlyUploadingListModel.removeElement(filename); // remove from the currently uploading list
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    };
    
    // Generated Methods

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FileSelectingDialog = new javax.swing.JDialog();
        FileChooser = new javax.swing.JFileChooser();
        QueueContainer = new javax.swing.JPanel();
        UploadQueueContainer = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        CurrentlyUploadingList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        ToBeUploadedList = new javax.swing.JList<>();
        DownloadQueueContainer = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        CurrentlyDownloadingList = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        ToBeDownloadedList = new javax.swing.JList<>();

        FileChooser.setRequestFocusEnabled(false);
        FileChooser.setSelectedFiles(null);
        FileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FileChooserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FileSelectingDialogLayout = new javax.swing.GroupLayout(FileSelectingDialog.getContentPane());
        FileSelectingDialog.getContentPane().setLayout(FileSelectingDialogLayout);
        FileSelectingDialogLayout.setHorizontalGroup(
            FileSelectingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FileSelectingDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 1033, Short.MAX_VALUE)
                .addContainerGap())
        );
        FileSelectingDialogLayout.setVerticalGroup(
            FileSelectingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FileSelectingDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(FileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Smilin' File Hosting");

        QueueContainer.setLayout(new javax.swing.BoxLayout(QueueContainer, javax.swing.BoxLayout.Y_AXIS));

        CurrentlyUploadingList.setModel(CurrentlyUploadingListModel);
        CurrentlyUploadingList.setToolTipText("");
        jScrollPane1.setViewportView(CurrentlyUploadingList);

        ToBeUploadedList.setModel(ToBeUploadedListModel);
        jScrollPane2.setViewportView(ToBeUploadedList);

        javax.swing.GroupLayout UploadQueueContainerLayout = new javax.swing.GroupLayout(UploadQueueContainer);
        UploadQueueContainer.setLayout(UploadQueueContainerLayout);
        UploadQueueContainerLayout.setHorizontalGroup(
            UploadQueueContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UploadQueueContainerLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(UploadQueueContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2))
                .addContainerGap(196, Short.MAX_VALUE))
        );
        UploadQueueContainerLayout.setVerticalGroup(
            UploadQueueContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UploadQueueContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        QueueContainer.add(UploadQueueContainer);

        CurrentlyDownloadingList.setModel(CurrentlyDownloadingListModel);
        CurrentlyDownloadingList.setToolTipText("");
        jScrollPane3.setViewportView(CurrentlyDownloadingList);

        ToBeDownloadedList.setModel(ToBeDownloadedListModel);
        jScrollPane4.setViewportView(ToBeDownloadedList);

        javax.swing.GroupLayout DownloadQueueContainerLayout = new javax.swing.GroupLayout(DownloadQueueContainer);
        DownloadQueueContainer.setLayout(DownloadQueueContainerLayout);
        DownloadQueueContainerLayout.setHorizontalGroup(
            DownloadQueueContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DownloadQueueContainerLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(DownloadQueueContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane4))
                .addContainerGap(196, Short.MAX_VALUE))
        );
        DownloadQueueContainerLayout.setVerticalGroup(
            DownloadQueueContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DownloadQueueContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        QueueContainer.add(DownloadQueueContainer);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(QueueContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(698, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(QueueContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(440, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FileChooserActionPerformed
        final String cmd = evt.getActionCommand();
        if (Objects.equals(cmd, "ApproveSelection")) {
            final java.io.File[] files = this.FileChooser.getSelectedFiles();
            for (java.io.File file : files) {
                try {
                    this.ToBeUploadedListModel.addElement(file.getName()); // Adding the file to the to be uploaded list
                    this.uploadQueue.put(file); // dispatch an upload event
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            this.FileSelectingDialog.setVisible(false); // removing the dialog
            return;
        }
        if (Objects.equals(cmd, "CancelSelection")) {
            this.FileSelectingDialog.setVisible(false); // removing the dialog
        }
    }//GEN-LAST:event_FileChooserActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> CurrentlyDownloadingList;
    private javax.swing.JList<String> CurrentlyUploadingList;
    private javax.swing.JPanel DownloadQueueContainer;
    private javax.swing.JFileChooser FileChooser;
    private javax.swing.JDialog FileSelectingDialog;
    private javax.swing.JPanel QueueContainer;
    private javax.swing.JList<String> ToBeDownloadedList;
    private javax.swing.JList<String> ToBeUploadedList;
    private javax.swing.JPanel UploadQueueContainer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
