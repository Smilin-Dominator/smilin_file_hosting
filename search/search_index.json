{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction # Smilin' File Hosting is a Zero Knowledge file hosting service written in Python. I wrote this as a hobby project for my cousins, and it's turned into something a lot more cool. Installation # This program has two parts, the Server (main API) and the Client. Server # To run the server, install Docker (specifically, docker-compose). Windows Linux MacOS You have to install Docker Desktop First, install Docker and then run this; sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose Install homebrew, if it's not installed and then run this; brew install docker-compose Afterwards, open up a Terminal and cd to the 'server/' directory and run docker-compose up -d This creates two containers; A Python Container (The Main API) A MariaDB Container (The Main Database) The Python Container contains the main server, which exposes Port 2356, and the MariaDB Container contains a MariaDB Database with the user and password specified in the docker-compose file. Client # To run the client, you'll need a python interpreter. The program was written using Python 3.10, so install either 3.10 or any version above 3.10. You may download it from here . Afterwards, cd to the 'client/', create a virtual environment 1 and install the requirements. Windows Linux and MacOS python -m venv ./venv/ ./venv/Scripts/activate python -m pip install -r requirements.txt python3 -m venv ./venv/ source ./venv/bin/activate python3 -m pip install -r requirements.txt Or, if you want to use Anaconda / Miniconda; conda env create -f environment.yml conda activate smilin_file_client This installs all the packages required by the Client to the virtual environment. After installing the requirements, you need to install GPG (GNU Privacy Guard), which is essential for the encryption part. You may download it from here . After installing GPG, you need to generate a Key Pair. As this is a process that's not that straightforward, here's a guide to follow. But here are my preferences and options essential for the program to function properly; Kind of key -> RSA and RSA (NEEDED) Size -> Any size, I'd recommend a high amount (>=2048) Email -> This is the same email that you'll use when running the program, so choose wisely You may finally run the program by typing; Windows Linux and MacOS python main.py python3 main.py Instead of using the system-wide or local interpreter, it's safer and more efficient to use a virtual environment. Note that you don't have to use python's \"venv\", you can even use an Anaconda Environment, as specified right under. \u21a9","title":"Introduction"},{"location":"#introduction","text":"Smilin' File Hosting is a Zero Knowledge file hosting service written in Python. I wrote this as a hobby project for my cousins, and it's turned into something a lot more cool.","title":"Introduction"},{"location":"#installation","text":"This program has two parts, the Server (main API) and the Client.","title":"Installation"},{"location":"#server","text":"To run the server, install Docker (specifically, docker-compose). Windows Linux MacOS You have to install Docker Desktop First, install Docker and then run this; sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose Install homebrew, if it's not installed and then run this; brew install docker-compose Afterwards, open up a Terminal and cd to the 'server/' directory and run docker-compose up -d This creates two containers; A Python Container (The Main API) A MariaDB Container (The Main Database) The Python Container contains the main server, which exposes Port 2356, and the MariaDB Container contains a MariaDB Database with the user and password specified in the docker-compose file.","title":"Server"},{"location":"#client","text":"To run the client, you'll need a python interpreter. The program was written using Python 3.10, so install either 3.10 or any version above 3.10. You may download it from here . Afterwards, cd to the 'client/', create a virtual environment 1 and install the requirements. Windows Linux and MacOS python -m venv ./venv/ ./venv/Scripts/activate python -m pip install -r requirements.txt python3 -m venv ./venv/ source ./venv/bin/activate python3 -m pip install -r requirements.txt Or, if you want to use Anaconda / Miniconda; conda env create -f environment.yml conda activate smilin_file_client This installs all the packages required by the Client to the virtual environment. After installing the requirements, you need to install GPG (GNU Privacy Guard), which is essential for the encryption part. You may download it from here . After installing GPG, you need to generate a Key Pair. As this is a process that's not that straightforward, here's a guide to follow. But here are my preferences and options essential for the program to function properly; Kind of key -> RSA and RSA (NEEDED) Size -> Any size, I'd recommend a high amount (>=2048) Email -> This is the same email that you'll use when running the program, so choose wisely You may finally run the program by typing; Windows Linux and MacOS python main.py python3 main.py Instead of using the system-wide or local interpreter, it's safer and more efficient to use a virtual environment. Note that you don't have to use python's \"venv\", you can even use an Anaconda Environment, as specified right under. \u21a9","title":"Client"},{"location":"changelog/","text":"Changelog # v1.0 # This is the Base Version. It contains a fully functional Server (written in Python's FastAPI) and a GUI Client (written in Python's TKinter). I also included documentation written in Material-MkDocs. Features # New GUI Client New API Server Documentation Written In Material-MkDocs Fixes # None v1.1 # This is the first major update. I changed the Username based authentication to a UUID based authentication system. Unlike the first version, where anybody could connect using a username, without registering and the table would be created for them. This time, I created a new table that stores the UUIDs of all the users. If somebody tries to connect without being registered, the server returns false, unlike earlier, where the server would create a table. To register, you have to send a POST request to \"/register\" and it'll add the UUID to the Users Table, create a Table for the UUID and return the UUID to the client (so you can connect). If you lose the UUID, you won't be able to access your files. Features # UUID Based Authentication Switched Database to MariaDB Fixes # #1 -> Folder Name and Database Name could Differ v1.2 # This is the second major update; I switched the GUI Framework from Python's TKinter to a much more powerful PyQt Library, and took the time to design the UIs in Qt Studio and import them at runtime, which makes it easier to program and improves the result. Instead of tucking the credentials section to the right of the main UI, I made a separate window for it, and added a few more choices! I moved from using a frame for the files to using a TreeWidget, which has Checkboxes and as a result, added new methods to download and delete the selected files. I also improved the Concurrency features in this release; Using methods like ThreadPoolExecutors and Locks. Features # New Redesigned User Interface written using the PyQt Library Files are now selectable (making Bulk Downloads and Deletes Possible) Credentials and the Main UI are in separate windows Added an option to specify the maximum amount of concurrent downloads and uploads. Fixes # #2 -> Error When Decrypting","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v10","text":"This is the Base Version. It contains a fully functional Server (written in Python's FastAPI) and a GUI Client (written in Python's TKinter). I also included documentation written in Material-MkDocs.","title":"v1.0"},{"location":"changelog/#features","text":"New GUI Client New API Server Documentation Written In Material-MkDocs","title":"Features"},{"location":"changelog/#fixes","text":"None","title":"Fixes"},{"location":"changelog/#v11","text":"This is the first major update. I changed the Username based authentication to a UUID based authentication system. Unlike the first version, where anybody could connect using a username, without registering and the table would be created for them. This time, I created a new table that stores the UUIDs of all the users. If somebody tries to connect without being registered, the server returns false, unlike earlier, where the server would create a table. To register, you have to send a POST request to \"/register\" and it'll add the UUID to the Users Table, create a Table for the UUID and return the UUID to the client (so you can connect). If you lose the UUID, you won't be able to access your files.","title":"v1.1"},{"location":"changelog/#features_1","text":"UUID Based Authentication Switched Database to MariaDB","title":"Features"},{"location":"changelog/#fixes_1","text":"#1 -> Folder Name and Database Name could Differ","title":"Fixes"},{"location":"changelog/#v12","text":"This is the second major update; I switched the GUI Framework from Python's TKinter to a much more powerful PyQt Library, and took the time to design the UIs in Qt Studio and import them at runtime, which makes it easier to program and improves the result. Instead of tucking the credentials section to the right of the main UI, I made a separate window for it, and added a few more choices! I moved from using a frame for the files to using a TreeWidget, which has Checkboxes and as a result, added new methods to download and delete the selected files. I also improved the Concurrency features in this release; Using methods like ThreadPoolExecutors and Locks.","title":"v1.2"},{"location":"changelog/#features_2","text":"New Redesigned User Interface written using the PyQt Library Files are now selectable (making Bulk Downloads and Deletes Possible) Credentials and the Main UI are in separate windows Added an option to specify the maximum amount of concurrent downloads and uploads.","title":"Features"},{"location":"changelog/#fixes_2","text":"#2 -> Error When Decrypting","title":"Fixes"},{"location":"usage/","text":"Usage # This section describes how to use the program. Server # After issuing the docker-compose up -d command, the MySQL Database should start in about 30 Seconds, but the API might take about a minute or two, depending on your; Network Speed (as it needs to install the requirements) Clock Speed (to start the API inside a Container). Afterwards, you can test the API by issuing the command curl -X GET http://(server):2356/(token)/ , replacing server with the server's domain/ip and token with a random string. It should return false , as there's no UUID registered (but if you used a registered token, it'll return True) All the Server Interaction is done through the client, so there's no need to use curl or wget to send requests to the server again. Client # This guide assumes that you've performed all the actions mentioned in the installation page. First Time Setup # Upon first launch, you'll see a window called credentials . If it's your absolute first time setting up the client; Enter the link into the link field and hit register. If the link is valid, the token field should be filled with a random token. Otherwise, just enter the link into the link field and your token into the token field, without hitting register. After entering the token and the link , enter the email bound to your GPG Key into the email field. In the advanced features section, input the maximum number of concurrent uploads and downloads that can take place parallely. I've found that 4 is the perfect balance for me, but you can change it. I've limited the numbers to 10, for obvious reasons, but you can always override it by editing the JSON file manually. And finally, click 'Save and Connect'. If the connection succeeds, you will be transferred to the Main UI. Then, you can refer to the following section. The Main Program # Credentials Window # You will get this screen if; It's the first time launching the program. The connection to the server failed. The token is invalid. In the first container (labeled \"Credentials\"), you'll see 3 Input fields; Element Type Function Token Entry This is the unique username you use to connect to the server Link Entry This is the link to the server Email Entry This is the email attached to your GPG Key In the second container (labeled \"Advanced Features\"), you'll see 2 Number Input Boxes (SpinBoxes); Element Type Function Concurrent Downloads SpinBox The maximum amount of download threads to run in parallel Concurrent Uploads SpinBox The maximum amount of upload threads to run in parallel In the third container (labeled \"Operations\"), you'll see 2 Buttons and 1 Label; Element Type Function Register Button If the link isn't empty, this will try and connect to the server and register you Status Label This invisible label will display the status; Such as connection errors and all Save and Connect Button This will overwrite the options in 'credentials/config.json' with the new credentials you entered and connect to the server Main Window # In the left-most container (labeled \"Status\"), there are 2 more containers and 1 label: Element Type Function Uploading Files ListWidget This will display the files that are currently uploading Status Label This invisible status will show the status; Such as connection errors Downloading Files ListWidget This will display the files that are currently downloading In the top-right container (labeled \"Files\"), there's a TreeWidget: Element Type Function Files Tree Widget Displays the files with a checkbox to the left of them (see below) In the bottom container (labeled \"Operations\"), there are 5 Buttons: Element Type Function Download Selected Button Downloads the files you selected Delete Selected Button Deletes the files you selected Refresh Button Refreshes the file list Upload File Button This opens a file dialog for you to select as many files as you'd like Credentials Button This opens the credentials window","title":"Usage"},{"location":"usage/#usage","text":"This section describes how to use the program.","title":"Usage"},{"location":"usage/#server","text":"After issuing the docker-compose up -d command, the MySQL Database should start in about 30 Seconds, but the API might take about a minute or two, depending on your; Network Speed (as it needs to install the requirements) Clock Speed (to start the API inside a Container). Afterwards, you can test the API by issuing the command curl -X GET http://(server):2356/(token)/ , replacing server with the server's domain/ip and token with a random string. It should return false , as there's no UUID registered (but if you used a registered token, it'll return True) All the Server Interaction is done through the client, so there's no need to use curl or wget to send requests to the server again.","title":"Server"},{"location":"usage/#client","text":"This guide assumes that you've performed all the actions mentioned in the installation page.","title":"Client"},{"location":"usage/#first-time-setup","text":"Upon first launch, you'll see a window called credentials . If it's your absolute first time setting up the client; Enter the link into the link field and hit register. If the link is valid, the token field should be filled with a random token. Otherwise, just enter the link into the link field and your token into the token field, without hitting register. After entering the token and the link , enter the email bound to your GPG Key into the email field. In the advanced features section, input the maximum number of concurrent uploads and downloads that can take place parallely. I've found that 4 is the perfect balance for me, but you can change it. I've limited the numbers to 10, for obvious reasons, but you can always override it by editing the JSON file manually. And finally, click 'Save and Connect'. If the connection succeeds, you will be transferred to the Main UI. Then, you can refer to the following section.","title":"First Time Setup"},{"location":"usage/#the-main-program","text":"","title":"The Main Program"},{"location":"usage/#credentials-window","text":"You will get this screen if; It's the first time launching the program. The connection to the server failed. The token is invalid. In the first container (labeled \"Credentials\"), you'll see 3 Input fields; Element Type Function Token Entry This is the unique username you use to connect to the server Link Entry This is the link to the server Email Entry This is the email attached to your GPG Key In the second container (labeled \"Advanced Features\"), you'll see 2 Number Input Boxes (SpinBoxes); Element Type Function Concurrent Downloads SpinBox The maximum amount of download threads to run in parallel Concurrent Uploads SpinBox The maximum amount of upload threads to run in parallel In the third container (labeled \"Operations\"), you'll see 2 Buttons and 1 Label; Element Type Function Register Button If the link isn't empty, this will try and connect to the server and register you Status Label This invisible label will display the status; Such as connection errors and all Save and Connect Button This will overwrite the options in 'credentials/config.json' with the new credentials you entered and connect to the server","title":"Credentials Window"},{"location":"usage/#main-window","text":"In the left-most container (labeled \"Status\"), there are 2 more containers and 1 label: Element Type Function Uploading Files ListWidget This will display the files that are currently uploading Status Label This invisible status will show the status; Such as connection errors Downloading Files ListWidget This will display the files that are currently downloading In the top-right container (labeled \"Files\"), there's a TreeWidget: Element Type Function Files Tree Widget Displays the files with a checkbox to the left of them (see below) In the bottom container (labeled \"Operations\"), there are 5 Buttons: Element Type Function Download Selected Button Downloads the files you selected Delete Selected Button Deletes the files you selected Refresh Button Refreshes the file list Upload File Button This opens a file dialog for you to select as many files as you'd like Credentials Button This opens the credentials window","title":"Main Window"}]}