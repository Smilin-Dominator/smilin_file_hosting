{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction # Smilin' File Hosting is a Zero Knowledge file hosting service written in Python. I wrote this as a hobby project for my cousins, and it's turned into something a lot more cool. Installation # This program has two parts, the Server (main API) and the Client. Server # To run the server, install Docker (specifically, docker-compose). Windows Linux MacOS You have to install Docker Desktop First, install Docker and then run this; sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose Install homebrew, if it's not installed and then run this; brew install docker-compose Afterwards, open up a Terminal and cd to the 'server/' directory and run docker-compose up -d This creates two containers; A Python Container (The Main API) A MySQL Container (The Main Database) The Python Container contains the main server, which exposes Port 2356, and the MySQL Container contains a MySQL Database with the user and password specified in the docker-compose file. Client # To run the client, you'll need a python interpreter. The program was written using Python 3.10, so install either 3.10 or any version above 3.10. You may download it from here . Afterwards, cd to the 'client/', create a virtual environment 1 and install the requirements. To do this, run; Windows Linux and MacOS python -m venv ./venv/ ./venv/Scripts/activate python -m pip install -r requirements.txt python3 -m venv ./venv/ source ./venv/bin/activate python3 -m pip install -r requirements.txt This installs all the packages required by the Client to the virtual environment. After installing the requirements, you need to install GPG (GNU Privacy Guard), which is essential for the encryption part. You may download it from here . After installing, GPG, you need to generate a Key Pair. As this is a process that's not that straightforward, here's a guide to follow. But here are my preferences and options essential for the program to function properly; Kind of key -> RSA and RSA (NEEDED) Size -> Any size, I'd recommend a high amount (>=2048) Email -> This is the same email that you'll use when running the program, so choose wisely You may finally run the program by typing; Windows Linux and MacOS python main.py python3 main.py Instead of using the system-wide or local interpreter, it's safer and more efficient to use a virtual environment. Note that you don't have to use python's \"venv\", you can even use an Anaconda Environment. \u21a9","title":"Introduction"},{"location":"#introduction","text":"Smilin' File Hosting is a Zero Knowledge file hosting service written in Python. I wrote this as a hobby project for my cousins, and it's turned into something a lot more cool.","title":"Introduction"},{"location":"#installation","text":"This program has two parts, the Server (main API) and the Client.","title":"Installation"},{"location":"#server","text":"To run the server, install Docker (specifically, docker-compose). Windows Linux MacOS You have to install Docker Desktop First, install Docker and then run this; sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose Install homebrew, if it's not installed and then run this; brew install docker-compose Afterwards, open up a Terminal and cd to the 'server/' directory and run docker-compose up -d This creates two containers; A Python Container (The Main API) A MySQL Container (The Main Database) The Python Container contains the main server, which exposes Port 2356, and the MySQL Container contains a MySQL Database with the user and password specified in the docker-compose file.","title":"Server"},{"location":"#client","text":"To run the client, you'll need a python interpreter. The program was written using Python 3.10, so install either 3.10 or any version above 3.10. You may download it from here . Afterwards, cd to the 'client/', create a virtual environment 1 and install the requirements. To do this, run; Windows Linux and MacOS python -m venv ./venv/ ./venv/Scripts/activate python -m pip install -r requirements.txt python3 -m venv ./venv/ source ./venv/bin/activate python3 -m pip install -r requirements.txt This installs all the packages required by the Client to the virtual environment. After installing the requirements, you need to install GPG (GNU Privacy Guard), which is essential for the encryption part. You may download it from here . After installing, GPG, you need to generate a Key Pair. As this is a process that's not that straightforward, here's a guide to follow. But here are my preferences and options essential for the program to function properly; Kind of key -> RSA and RSA (NEEDED) Size -> Any size, I'd recommend a high amount (>=2048) Email -> This is the same email that you'll use when running the program, so choose wisely You may finally run the program by typing; Windows Linux and MacOS python main.py python3 main.py Instead of using the system-wide or local interpreter, it's safer and more efficient to use a virtual environment. Note that you don't have to use python's \"venv\", you can even use an Anaconda Environment. \u21a9","title":"Client"},{"location":"changelog/","text":"Changelog # v1.0 # This is the Base Version. It contains a fully functional Server (written in Python's FastAPI) and a GUI Client (written in Python's TKinter). I also included documentation written in Material-MkDocs. Features # New GUI Client New API Server Documentation Written In Material-MkDocs Fixes # None","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v10","text":"This is the Base Version. It contains a fully functional Server (written in Python's FastAPI) and a GUI Client (written in Python's TKinter). I also included documentation written in Material-MkDocs.","title":"v1.0"},{"location":"changelog/#features","text":"New GUI Client New API Server Documentation Written In Material-MkDocs","title":"Features"},{"location":"changelog/#fixes","text":"None","title":"Fixes"},{"location":"usage/","text":"Usage # This section describes how to use the program. Server # After issuing the docker-compose up -d command, the MySQL Database should start in about 30 Seconds, but the API might take about a minute or two, depending on your; Network Speed (as it needs to install the requirements) Clock Speed (to start the API inside a Container). Afterwards, you can test the API by issuing the command curl -X GET http://(server):2356/(username)/ , replacing server with the server's domain/ip and username with a username. It should return true , regardless of it being a new username or an old one. All the Server Interaction is done through the client, so there's no need to use curl or wget to send requests to the server again. Client # This guide assumes that you've performed all the actions mentioned in the installation page. First Time Setup # As soon as you run the client for the first time, you should see a screen with a section on the left, and the rest of the area blank. (See Credentials for the Fields) Note The name of your table in the Database is the username you input; Lowercased Stripped Of Spaces So, if the input was \"De v Is H a\" or \"Devis HA\" or vice versa the table name will always be \"devisha\". Afterwards, press connect. If the connection succeeds, you'll see the rest of the elements of the program appear, if not, check if the link and username are correct. Note that your credentials are saved in a file called config.json in the credentials directory of client. Each time you open the program after the first time, your credentials will autoload for you. If you put different credentials and press 'connect', it'll override the previous credentials and autoload those next time. The Main Program # Credentials # This section displays 3 Entry Fields and One Button; Name (Entry) -> Username that you use to connect to the server. Link (Entry) -> URL to the server hosting the service, with the Port (:2356) at the End. Email (Entry) -> The email that's attached to your GPG Key (The one you set in the installation page) Connect (Button) -> This will save the credentials to the configuration file and connect to the server. Files # This section displays a list of decrypted filenames along with buttons to download and delete them. If you press download, it downloads and decrypts the file into a folder in the client directory called 'files' If you press delete, it deletes the file from the database and from the server's folder Status # Upload (Button) This will open a file(s) selection dialog. Select as many files as you like and then submit. After you do, it'll encrypt the files and their filenames and upload them. Uploading (Frame) This displays the files that are currently being uploaded Downloading (Frame) This displays the files that are currently being downloaded","title":"Usage"},{"location":"usage/#usage","text":"This section describes how to use the program.","title":"Usage"},{"location":"usage/#server","text":"After issuing the docker-compose up -d command, the MySQL Database should start in about 30 Seconds, but the API might take about a minute or two, depending on your; Network Speed (as it needs to install the requirements) Clock Speed (to start the API inside a Container). Afterwards, you can test the API by issuing the command curl -X GET http://(server):2356/(username)/ , replacing server with the server's domain/ip and username with a username. It should return true , regardless of it being a new username or an old one. All the Server Interaction is done through the client, so there's no need to use curl or wget to send requests to the server again.","title":"Server"},{"location":"usage/#client","text":"This guide assumes that you've performed all the actions mentioned in the installation page.","title":"Client"},{"location":"usage/#first-time-setup","text":"As soon as you run the client for the first time, you should see a screen with a section on the left, and the rest of the area blank. (See Credentials for the Fields) Note The name of your table in the Database is the username you input; Lowercased Stripped Of Spaces So, if the input was \"De v Is H a\" or \"Devis HA\" or vice versa the table name will always be \"devisha\". Afterwards, press connect. If the connection succeeds, you'll see the rest of the elements of the program appear, if not, check if the link and username are correct. Note that your credentials are saved in a file called config.json in the credentials directory of client. Each time you open the program after the first time, your credentials will autoload for you. If you put different credentials and press 'connect', it'll override the previous credentials and autoload those next time.","title":"First Time Setup"},{"location":"usage/#the-main-program","text":"","title":"The Main Program"},{"location":"usage/#credentials","text":"This section displays 3 Entry Fields and One Button; Name (Entry) -> Username that you use to connect to the server. Link (Entry) -> URL to the server hosting the service, with the Port (:2356) at the End. Email (Entry) -> The email that's attached to your GPG Key (The one you set in the installation page) Connect (Button) -> This will save the credentials to the configuration file and connect to the server.","title":"Credentials"},{"location":"usage/#files","text":"This section displays a list of decrypted filenames along with buttons to download and delete them. If you press download, it downloads and decrypts the file into a folder in the client directory called 'files' If you press delete, it deletes the file from the database and from the server's folder","title":"Files"},{"location":"usage/#status","text":"Upload (Button) This will open a file(s) selection dialog. Select as many files as you like and then submit. After you do, it'll encrypt the files and their filenames and upload them. Uploading (Frame) This displays the files that are currently being uploaded Downloading (Frame) This displays the files that are currently being downloaded","title":"Status"}]}