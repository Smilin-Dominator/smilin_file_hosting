import {types} from "cassandra-driver";
import {createHash, randomUUID} from "crypto";

export interface File {
    id: types.Uuid, // The file id
    uid: types.Uuid, // The user id
    encrypted_filename: Buffer, // The encrypted filename generated by the client
    iv: Buffer, // The initialization vector used by the client to encrypt the file
    stored_filename: string, // The stored filename. SHA256 Hash => encrypted_filename + unix time
    date_added: number, // Seconds since Epoch
}

export function convertRowToFile(row: types.Row): File {
    let obj: Partial<File> = {};
    if (row != null) {
        obj = {
            id: row.get("id"),
            uid: row.get("uid"),
            encrypted_filename: row.get("encrypted_filename"),
            iv: row.get("iv"),
            stored_filename: row.get("stored_filename"),
            date_added: row.get("date_added")
        };
    }
    return obj as File;
}

export function createFileObject(uid: types.Uuid, iv: Buffer, encrypted_filename: Buffer, id?: types.Uuid, date_added?: number, stored_filename?: string): File {
    id = id ?? types.Uuid.fromString(randomUUID());
    date_added = date_added ?? Date.now();
    stored_filename = stored_filename ?? createHash('sha256')
        .update(encrypted_filename + date_added.toString())
        .digest()
        .toString('hex');
    return {
        id: id,
        uid: uid,
        encrypted_filename: encrypted_filename,
        iv: iv,
        stored_filename: stored_filename,
        date_added: date_added,
    };
}
